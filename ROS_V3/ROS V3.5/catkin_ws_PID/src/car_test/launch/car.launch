<?xml version="1.0" encoding="UTF-8"?>
<launch>

<!-- Define arguments that can be modified at runtime -->
<arg name="model" default="$(find car_test)/urdf/car.xacro"/>
<arg name="hill" default="$(find car_test)/models/hill"/>
<arg name="rvizconfig" default="$(find car_test)/urdf.rviz"/>

<!-- Include Gazebo simulation environment setup -->
<include file="$(find car_test)/launch/gazebo.launch">
  <arg name="model" value="$(arg model)"/>
</include>

<!-- Commented out RViz node for optional use -->
<!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)"/> -->

<!-- Load controller configurations onto the ROS parameter server -->
<rosparam file="$(find car_test)/config/joint_states.yaml" command="load"/>
<rosparam file="$(find car_test)/config/diff_drive.yaml" command="load"/>

<!-- Spawn controllers for the robot -->
<node name="robot_arm_controller_spawner" pkg="controller_manager" type="spawner"
  respawn="true" output="screen" 
  args="/car/joint_state_controller
        /car/diff_drive_controller
        --shutdown-timeout 3"/>

<!-- Publish joint states as TF transforms for visualization and other uses -->
<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
</node>

<!-- Provide a GUI for manual steering of the robot -->
<node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
  <param name="default_topic" value="/car/diff_drive_controller/cmd_vel"/> 
</node>

</launch>
